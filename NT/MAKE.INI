# MAKE.INI Version v6.12
#
# This is a sample 'make.ini' file for Opus Make.  You will probably want
# to customize it for your system. Many of the customization features
# listed in the examples below have been "commented out," meaning that
# they have "#" in first column of the makefile line. Use these examples
# as guidelines for enabling your own features.


#################################################################
#                                                               #
#                       Initial Directives                      #
#                                                               #
#################################################################

# Directives to be in effect for all makes can be set in make.ini. 
#
# This .LOGO directive causes Make to print its identification banner.
# We stick a _OM_LOGO variable into the environment if it isn't
# defined yet so that the logo is only printed once even when we do a
# recursive make.
#
#
%ifndef _OM_LOGO
.LOGO :
%setenv _OM_LOGO=1

#
# At this time we also let people know they are using our MAKE.INI
# so that they don't get hosed accidentally.
#
%echo
%echo Note: You are using Opus' default initialization file '$(BUILTINS)'
%echo

%endif

# This .DEBUG directive turns on warnings for unrecognized makefile lines.
#
.DEBUG : 4

# This .KEEPDIR directive tells Make to keep a copy of each search directory
# it reads into memory. The in-memory directory can be searched much more
# quickly than the on-disk directory, but .KEEPDIR cannot be used if shell
# lines update targets as a side effect.
#
# For example, if updating the target "foo.obj" runs shell lines that
# actually update "foo.obj" and "foo.sbr", but "foo.sbr" did not exist
# before the shell lines ran, then Make will not know that foo.sbr
# exists because it wasn't in the on-disk directory when the directory
# was copied into memory. In this case either do not use .KEEPDIR
# or use a multiple-target dependency which says that "foo.obj" *and*
# "foo.sbr" are updated when the shell lines run, as in:
#
#	foo.obj + foo.sbr : foo.c
#		... shell line(s) to produce foo.obj and foo.sbr
#
# Note that .KEEPDIR cannot be used during NMAKE emulation since NMAKE
# doesn't have this feature and some NMAKE makefiles will break.
%if $(.MS_NMAKE) == 0
.KEEPDIR :
%endif

# The .DEBUG_GRAPHICS directive causes line-drawing characters to be used
# when tracing Make with the -d command-line flag.
#
.DEBUG_GRAPHICS :


#################################################################
#                                                               #
#                       Memory Miser                            #
#                                                               #
#################################################################

# This .MISER attribute (which looks like a directive in this form) tells
# Make that the memory miser will be used for *every* target.
.MISER :				# always use the miser.


# You can also tell Make to use the memory miser only for particular
# program names.
#.MEMSWAP : make \c6\binb\link		# use miser for these executables


#################################################################
#                                                               #
#                       Initial Macros                          #
#                                                               #
#################################################################

# The directory Make uses for temporary files is specified by the MAKE_TMP
# macro.  If MAKE_TMP is not specified, Make uses the current directory as
# the temporary directory. Here we've defined MAKE_TMP based on the value
# of an environment variable, TMP, which is an environment variable often
# used by compiler makers.
#
MAKE_TMP= $(TMP)



#################################################################
#                                                               #
#                       Inference Rules                         #
#                                                               #
#################################################################

# When adding inference rules, use macros to specify the program name
# and flags. This makes it easier to change them in a makefile. Here
# is an example of a group rule that builds both a .c and .y file
# from a YACC .y file.
#
# YACC		= yacc
# YFLAGS	= 
# 
# %.c + %.h : %.y
# 	$(YACC) $(YFLAGS) $(.SOURCE)
# 	copy ytab.c $(.TARGET,1)	# updates the .c target file.
# 	copy ytab.h $(.TARGET,2)	# updates the .h target file.


#
# CA/Clipper support
#
# %.obj : %.prg
#	$(CLIPPER) $(CLIPFLAGS) $(.SOURCE)
#
# .TYPE.SRC	+= .prg
# .TYPE.HDR	+= .ch
# .HDR.prg	= ^\#[Ii][Nn][Cc][Ll][Uu][Dd][Ee][ \t]+"\(.*\)"
# .HDRPATH.prg	= . $(INCLUDE,;= )



#################################################################
#                                                               #
#                      Search Directories                       #
#                                                               #
#################################################################

# Make's search directory support lets you control the directories Make
# looks in for targets (files) that have *no directory component* in
# their names. This example sets up search directories for .h files that
# might reside in the current directory or in the "include" subdirectory,
# for object (.obj) files that reside in the "obj" subdirectory (only).
# The source (.c) files can only reside in the current directory so we don't
# need to set up a search directory for them.
#
# .PATH.h	= .;include
# .PATH.obj	= obj
#
# It is also possible to set up search directories for particular
# files with the .SEARCH directive. For example, we can tell Make
# to look for main.obj and sub.obj in the current and parent directory
# with the following:
#
# .SEARCH : .;.. main.obj sub.obj



#################################################################
#                                                               #
#                   Version Control Systems                     #
#                                                               #
#################################################################

# Make's version control system (VCS) support allows Make to extract
# source files from the VCS if it needs them. To activate Make's VCS
# support, use the .XXX_STORAGE directive where XXX is the name of
# the VCS.

# PVCS support:
#
# An example which enables PVCS support for the most recent version of 
# .c, .h, and .asm files, and tells Make that the storage files reside
# in either the "pvcs" or "e:\pvcs" subdirectory:
#
# .PVCS_STORAGE : .c .h .asm
# .PATH.PVCS_EXT = pvcs;e:\pvcs


# SourceSafe (SS) support
#
# An example which enables SourceSafe support for the most recent version of 
# .c, .h, and .asm files. SourceSafe uses a database, so we have to tell
# it the location of the database with the SSDATA macro. As well, the
# name of the SourceSafe project needs to be known, and it is defined in
# the SSPROJECT macro.
#
#
# .SS_STORAGE : .c .h .asm
# SSDATA 	= e:\ss\data
# SSPROJECT	= $$/Make


# Burton TLIB support:
#
# An example which enables TLIB support for the most recent version of 
# .c, .h, and .asm files, and tells Make that the storage files reside
# in either the "tlib" or "e:\tlib" subdirectory. Note that the name
# of the storage files is derived from the name of the source files
# with the use of the TLIBEXT macro, whose default value is "??x". This
# results in Make mapping the .c source extension to the .c_x storage 
# extension, .h maps to .h_x, and .asm maps to .asx. The TLIBEXT macro
# must be set to the same value as TLIB's LIBEXT configuration parameter.
#
# TLIBEXT = ??x
# .TLIB_STORAGE : .c .h .asm
# .PATH.TLIB_EXT = tlib;e:\tlib
#
# This directive enables Make's "fast" method of finding the timestamp of the
# most recent version. This is especially useful for TLIB.
#
# .VCS_FASTRECENT :



# RCS support:
#
# An example which enables RCS support for the most recent version of 
# .c, .h, .asm and extensionless files. The versioned files are stored in
# the RCS subdirectory of the current directory.
#
# .RCS_STORAGE : .c .h .asm %




#################################################################
#                                                               #
#        To execute shell lines before and/or after Make        #
#        does its run-time "making"                             #
#                                                               #
#################################################################

# The shell lines associated with the .BEFORE special target get executed once,
# before any targets get made.  The shell lines associated with the .AFTER
# special target get executed once, after all targets have been made. You
# can use these special targets to customize the environment for *every*
# child process or for turning on and off resident programs.
# 
# Here are a few samples, commented out.
#
# .BEFORE:
#	%setenv LIB f:\c8\lib;$(LIB)
# .AFTER:
#	@--erase \tmp\*.*	# erase any leftover temporary files created
#				# by the compiler or for other reasons.




#################################################################
#                                                               #
#                   Portability Issues                          #
#                                                               #
#################################################################

# For help with portability of extensions between makefiles that run under
# different operating systems, you can use conditional directives and
# the OS macro.
#
# %if $(OS) == unix
# O	= .o
# E	= 
# %else
# O	= .obj
# E	= .exe
# %endif

# With these in hand, your portable .c -> object file rule would be
# something like:
#
# %$O : %.c
#	$(CC) $(CFLAGS) -c $(.SOURCE)


# To have MKMF generate dependencies that use the portable $O as the object
# file extension, define the following macro:
#
# .TYPE.OBJ = $$O


# For help with portability of multiple line commands that run under different
# operating systems you can conditionally define a macro that is the multiple-
# command shell line separator.
#
# %if $(OS) == OS2
# ;	= &			# separator for multiple command
# %else
# ;	= ;			# separator for multiple command
# %endif
#
# With these in hand, a recursive make under OS/2, MSDOS, UNIX or NT looks like:
#
# recursive:
#	( chdir subdirectory $; $(MAKE) $(MFLAGS) )
#
# Alternatively, you can use the %chdir directive.
#
# recursive .MAKE:
#	%chdir subdirectory
#	$(MAKE) $(MFLAGS)
#	%chdir $(MAKEDIR)



#
# For Windows NT Support -- read the ntwin32.mak or win32.mak file and
# redefine the flags for the %.obj : %.c rule.
#
%if %defined(SystemRoot) && $(OS) == NT

#
# For NT 3.1 the ntwin32.mak file is in $(MSTOOLS)/h
#
%  if $(OSVERSION)$(OSRELEASE) == 310 && %defined(MSTOOLS)
%    if (%exists($(Mstools)/h/ntwin32.mak)
%      include $(Mstools)/h/ntwin32.mak
LINKLIBS	= $(conlibs)
LINKFLAGS	= $(conlflags)

%.obj : %.c
	$(CC) $(CDEBUG) $(CFLAGS) $(CVARS) $(RPCFLAG) {$< }
%    endif

#
# For NT 3.5 the win32.mak file should be in the first directory of INCLUDE
#
%  elif $(OSVERSION)$(OSRELEASE) >= 350 && %defined(INCLUDE)
%    if %exists($(INCLUDE,;= ,Q+,1)/win32.mak)

#
# Remember current emulation state and switch to NMAKE mode before
# the %include. This is because the win32.mak file uses macro
# definitions of the form:
#
#	cflags = $(cflags) ...
#
%      if $(.OPUS_MAKE)
_EM = OPUS
.MS_NMAKE :
%      elif $(.POLY_MAKE)
_EM = POLY
.MS_NMAKE :
%      endif

%      include $(INCLUDE,;= ,Q+,1)/win32.mak
LINKLIBS	= $(conlibs)
LINKFLAGS	= $(conlflags)

#
# Restore the emulation mode
#
%      ifdef _EM
.$(_EM)_MAKE :
%        undef _EM
%      endif

%.obj : %.c
	$(CC) $(CDEBUG) $(CFLAGS) $(CVARS) $(RPCFLAG) {$< }
%    endif	# %if %defined(INCLUDE)
%  endif	# %if $(OSVERSION ...


#
# For Windows 95 Support -- read the win32.mak file and
# redefine the flags for the %.obj : %.c rule.
#
# For Win 95 and VC 2.x - 4.x the win32.mak file should be in the
# first directory of INCLUDE
#
%elif %defined(windir) && $(OS) == WIN95 && %exists($(INCLUDE,;= ,Q+,1)/win32.mak)

#
# Remember emulation state and switch to NMAKE mode before the %include.
#
%if $(.OPUS_MAKE)
_EM = OPUS
.MS_NMAKE :
%elif $(.POLY_MAKE)
_EM = POLY
.MS_NMAKE :
%endif

%    include $(INCLUDE,;= ,Q+,1)/win32.mak
LINKLIBS	= $(conlibs)
LINKFLAGS	= $(conlflags)

#
# Restore the emulation mode
#
%ifdef _EM
.$(_EM)_MAKE :
%  undef _EM
%endif

%.obj : %.c
	$(CC) $(CDEBUG) $(CFLAGS) $(CVARS) $(RPCFLAG) {$< }
%endif



#################################################################
#                                                               #
#                   Visual C++ Support                          #
#                                                               #
#                                                               #
# This support lets you use Opus Make automatically from inside #
# the VC++ IDE as well as from the command line in the VC++     #
# project directory. See Appendix E for details.                #
#                                                               #
#################################################################
# _VCVer = 5x			# uncomment if you're using VC++ 5.x
# _VCVer = 4x			# uncomment if you're using VC++ 4.x
# _VCVer = 2x			# uncomment if you're using VC++ 2.x


%if %defined(MAKE) && %defined(_VCVer)
#
# A VC++ directory has a project database and corresponding makefile.
#   For VC++ 4.x and 5.x these are .ncb and .mak files.
#   For VC++ 2.x these are .vcp and .mak files.
#
%  if "$(_VCVer)" == 4x || "$(_VCVer)" == 5x
%    set __F = *.ncb
%  endif
%  if ! %defined(__F) && "$(_VCVer)" == 2x
%    set __F = *.vcp
%  endif
%  ifdef __F
%    set __F = $(__F,*F)
%    if '$(__F,2)'
%      set __F = $(__F,1)
%      echo OPUS MAKE: Warning: More than one *$(__F,E) file. Assuming $(__F).
%    endif
%    if ! %exists($(__F)) || ! %exists($(__F,R).mak)
%       undef __F
%    endif
%  endif

%  ifdef __F

#
#    Generate $(_VCProj).omk (an OpusMake-optimized makefile) if it 
#    is older than the VC++ makefile (or if it doesn't exist).
#
%    if  %time($(__F,R,>.omk)) < %time($(__F,R,>.mak))
%      if ! %exists($(__F,R,>.omk))
%        set _VCINIT =
%        if %exists(makefile)
%          echo OPUS Make: VC++ initialization: Can't overwrite 'makefile'!
%        else
%          set _VCINIT = -init $(BUILTINS,P,>vc2opus.stb)
%        endif
%      else
%      endif
%      set _VC2OPUS =$(MAKE,P,>vc2opus)	# path to vc2opus.exe
%      exec $(_VC2OPUS) $(_VCINIT) -queue $(__F,R,>.mak)
%      undef _VC2OPUS
%    endif
%  endif
%  undef __F

%endif
